📄 Modelo de README.md
# 📌 Prova .NET – Sistema MVC + API com Oracle

## 👤 Autores
Nomes:Lucas Vassão Braga  | Gabriel Fernandes Doms
RMs:        98607         |           98630

---

## 📖 Descrição
Este projeto foi desenvolvido como parte da avaliação prática da disciplina de Desenvolvimento Web .NET.  
O objetivo é criar um sistema **ASP.NET Core MVC** que consome uma **API REST** desenvolvida em **ASP.NET Core Web API**, com persistência em banco de dados **Oracle** via Entity Framework Core.

---

## 🏗️ Arquitetura
O projeto segue a arquitetura em duas camadas principais:

- **API (Prova.Api)**  
  Responsável pela regra de negócio e acesso ao banco Oracle.  
  Expõe endpoints REST para CRUD das entidades.

- **MVC (Prova.Mvc)**  
  Aplicação web com telas que consome a API através de `HttpClient`.  
  Responsável pela interface com o usuário, autenticação e navegação.

---

## 📂 Estrutura das Entidades
- **USUARIO** → usado para autenticação (login e senha).  
- **CLIENTE** → CRUD de clientes.  
- **PRODUTO** → CRUD de produtos, com regra de negócio (SKU único e estoque não pode ser negativo).  
- **IMOVEL** → Entidade extra para imóveis.  
- **CONTRATO** → Entidade extra vinculada a imóveis.  

---

## ⚙️ Tecnologias Utilizadas
- **.NET 6 / C#**  
- **ASP.NET Core MVC**  
- **ASP.NET Core Web API**  
- **Entity Framework Core (Oracle Provider)**  
- **Oracle Database 19c (FIAP)**  
- **Swagger (Swashbuckle)** para documentação e teste da API  
- **Bootstrap 5** para layout simples e responsivo  

---

## 🔧 Configuração do Ambiente
1. Clonar o repositório ou extrair o `.zip` fornecido.  
2. Abrir o arquivo `prova-dotnet-starter.sln` no **Visual Studio 2022**.  
3. Editar o arquivo `Prova.Api/appsettings.json` com sua connection string do Oracle:

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "User Id=rm98607;Password=fiap25;Data Source=oracle.fiap.com.br:1521/ORCL;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

🗄️ Banco de Dados
Script de criação das tabelas principais:
CREATE TABLE USUARIO (
    ID NUMBER PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    SENHA VARCHAR2(100) NOT NULL
);

CREATE TABLE CLIENTE (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(150),
    TELEFONE VARCHAR2(20)
);

CREATE TABLE PRODUTO (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOME VARCHAR2(100) NOT NULL,
    SKU VARCHAR2(50) UNIQUE NOT NULL,
    PRECO NUMBER(10,2) NOT NULL,
    ESTOQUE NUMBER NOT NULL
);

CREATE TABLE IMOVEL (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ENDERECO VARCHAR2(200) NOT NULL,
    VALOR NUMBER(10,2) NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'DISPONIVEL'
);

CREATE TABLE CONTRATO (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CLIENTE_ID NUMBER NOT NULL,
    IMOVEL_ID NUMBER NOT NULL,
    DATA_INICIO DATE NOT NULL,
    DATA_FIM DATE,
    CONSTRAINT FK_CONTRATO_CLIENTE FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTE(ID),
    CONSTRAINT FK_CONTRATO_IMOVEL FOREIGN KEY (IMOVEL_ID) REFERENCES IMOVEL(ID)
);

Inserir usuário inicial:
INSERT INTO USUARIO (ID, NOME, EMAIL, SENHA)
VALUES (1, 'Administrador', 'admin', 'admin123');
COMMIT;

▶️ Como Executar
Rodando a API

No Visual Studio, defina Prova.Api como Startup Project.

Pressione Ctrl + F5.

Acesse no navegador: https://localhost:5001/swagger

Teste o login em POST /api/Usuario/login.

Rodando o MVC

Deixe a API rodando.

Defina Prova.Mvc como Startup Project.

Pressione Ctrl + F5.

Faça login com:

Usuário: admin

Senha: admin123

Use os menus para gerenciar Clientes, Produtos, Imóveis e Contratos.